package mk262968.javalette.ast;
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;


/* Preliminaries to use the scanner.  */
scan with {: return lexer.next_token(); :};


parser code {: 
  public boolean syntaxErrors;


  JavaletteLexer lexer;

  public JavaletteParser(JavaletteLexer lex) {
      super(lex);
      lexer = lex;
  }

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    
    System.out.print("###\t"+message);
    
    if ( !(info instanceof Symbol) ) return;
    Symbol symbol = (Symbol) info;
    
    if ( symbol.left < 0 || symbol.right < 0 ) return;
    
    System.out.println(" at line "+symbol.left+", column "+symbol.right);
  }
  public void report_fatal_error(String message, Object info) {
		int l=-1, c=-1;
    if (info instanceof Symbol) {
			Symbol symbol = (Symbol) info;
			l = symbol.left;
			c = symbol.right;
		}
		throw new ParserError(message, l, c);
	}
:}; 



/* Terminals (tokens returned by lexer). */
terminal         BEGIN, END;
terminal         COMMA, LPAR, RPAR;
terminal				 SEMICOLON;

terminal WHILE, FOR, RETURN, IF, ELSE, TRUE, FALSE;

terminal LOGAND, LOGOR, LOGNOT;

terminal EQ;
terminal  INCR, DECR;

terminal String ADDOP, MULOP, COMPOP, UNOP;
terminal Integer INTEGER_LITERAL;
terminal Double DOUBLE_LITERAL;
terminal String STRING_LITERAL;
terminal String  IDENT;

non terminal Expression expression;
non terminal Variable variable;
non terminal LValue lvalue;
non terminal Assignement assignement;
non terminal WhileLoop while;
non terminal ForLoop for;
non terminal IfElse ifelse;
non terminal Instruction elseval;
non terminal Return return;
non terminal Instruction instruction;
non terminal Instruction cexpression;
non terminal scala.collection.immutable.List instructionList;
non terminal Block block;

non terminal Program program;
non terminal Function function;
non terminal scala.collection.immutable.List functionList;
non terminal Type type;
non terminal Argument argument;
non terminal scala.collection.immutable.List argumentList;
non terminal scala.collection.immutable.List nonemptyArgumentList;
non terminal scala.collection.immutable.List nameList;
non terminal Declaration declaration;
non terminal DeclarationName declarationName;

non terminal scala.collection.immutable.List expressionList;
non terminal scala.collection.immutable.List nonemptyExpressionList;
non terminal Call call;

precedence left ELSE;
precedence left EQ;
precedence left LOGOR;
precedence left LOGAND;
precedence left LOGNOT;
precedence left COMPOP;
precedence left ADDOP;
precedence left MULOP;
precedence right INCR, DECR;

start with program;

type ::= IDENT:name 
			{: RESULT = new Type(name, PosHelper.pos(nameleft, nameright)); :};

variable ::= IDENT:name {: RESULT = new Variable(name, PosHelper.pos(nameleft, nameright)); :};

lvalue ::=
		variable: v
			{: RESULT = v; :}
	| assignement :v
			{: RESULT = v; :}
	|	lvalue:lv INCR
			{: RESULT = new Increment(lv, PosHelper.pos(lvleft, lvright)); :}
	| lvalue:lv DECR
			{: RESULT = new Decrement(lv, PosHelper.pos(lvleft, lvright)); :};

assignement ::=
		lvalue:left EQ expression:value 
			{: RESULT = new Assignement(left, value, PosHelper.pos(leftleft, leftright)); :};

while ::= 
		WHILE:w LPAR expression:e RPAR instruction: i
			{: RESULT = new WhileLoop(e, i, PosHelper.pos(wleft, wright)); :};

for ::= 
		FOR:f LPAR assignement:init  SEMICOLON expression:e SEMICOLON assignement:step RPAR instruction: i
			{: RESULT = new ForLoop(init, e, step, i, PosHelper.pos(fleft, fright)); :};

elseval ::=
			{: RESULT = null; :}
	| ELSE instruction: i
			{: RESULT = i; :};

ifelse ::= IF:iff LPAR expression:c RPAR instruction:i elseval:ei
			{: RESULT = new IfElse(c, i, ei, PosHelper.pos(iffleft, iffright)); :};

return ::= 
		RETURN:r SEMICOLON
			{: RESULT = new Return(null, PosHelper.pos(rleft, rright)); :}
	| RETURN:r expression:value SEMICOLON
			{: RESULT = new Return(value, PosHelper.pos(rleft, rright)); :};

cexpression ::=
		expression:e SEMICOLON
			{: RESULT = e; :};

instruction ::=
		 cexpression:v
			{: RESULT = v; :}
	| ifelse:v
			{: RESULT = v; :}
	| while:v
			{: RESULT = v; :}
	| for:v
			{: RESULT = v; :}
	| return:v
			{: RESULT = v; :}
	| block:v
			{: RESULT = v; :}
	| declaration:v 
			{: RESULT = v; :};

instructionList ::=
			{: RESULT = ListHelper.nil(); :}
	| instruction:i instructionList:il
			{: RESULT = ListHelper.add(i, il); :};

block ::= BEGIN:b instructionList:il END
			{: RESULT = new Block(il, PosHelper.pos(bleft, bright)); :};

function ::= type:t IDENT:name LPAR argumentList: al RPAR block:body 
			{: RESULT = new Function(name, al, t, body, PosHelper.pos(tleft, tright)); :};

functionList ::= 
			{: RESULT = ListHelper.nil(); :}
	|	function:f functionList:fl
			{: RESULT = ListHelper.add(f, fl); :};

program ::= functionList: fl
			{: RESULT = new Program(fl, PosHelper.pos(flleft, flright)); :};

argument ::= type:t IDENT:name
			{: RESULT = new Argument(name, t, PosHelper.pos(tleft, tright)); :};

argumentList ::= 
			{: RESULT = ListHelper.nil(); :}
	| nonemptyArgumentList: v
			{: RESULT = v; :};

nonemptyArgumentList ::= 
	 	argument:a
			{: RESULT = ListHelper.one(a); :}
	|	argument:a COMMA nonemptyArgumentList:al
			{: RESULT = ListHelper.add(a, al); :};

nameList ::= 
		declarationName:name
			{: RESULT = ListHelper.one(name); :}
	| declarationName:name COMMA nameList:nl
			{: RESULT = ListHelper.add(name, nl); :};

declaration ::=
		type:t nameList:nl SEMICOLON
			{: RESULT = new Declaration(nl, t, PosHelper.pos(tleft, tright)); :};

declarationName ::=
		IDENT:name
			{: RESULT = new DeclarationName(name, null, PosHelper.pos(nameleft, nameright)); :}
	| IDENT:name EQ expression:v
			{: RESULT = new DeclarationName(name, v, PosHelper.pos(nameleft, nameright)); :};

expressionList ::= 
			{: RESULT = ListHelper.nil(); :}
	| nonemptyExpressionList: v
			{: RESULT = v; :};

nonemptyExpressionList ::= 
		expression:e
			{: RESULT = ListHelper.one(e); :}
	|	expression:e COMMA nonemptyExpressionList:el
			{: RESULT = ListHelper.add(e, el); :};

call ::=
		IDENT:name LPAR expressionList:el RPAR
			{: RESULT = new Call(name, el, PosHelper.pos(nameleft, nameright)); :};

expression ::=
		expression:left MULOP:t expression:right 
			{: RESULT = new BinaryOperation(left, right, t, PosHelper.pos(leftleft, leftright)); :}
	|	expression:left ADDOP:t expression:right
			{: RESULT = new BinaryOperation(left, right, t, PosHelper.pos(leftleft, leftright)); :}
	|	expression:left COMPOP:t expression:right
			{: RESULT = new BinaryOperation(left, right, t, PosHelper.pos(leftleft, leftright)); :}
	|	ADDOP:t expression:right
			{: RESULT = new UnaryOperation(right, t, PosHelper.pos(tleft, tright)); :}
	|	expression:left LOGAND expression:right
			{: RESULT = new BinaryOperation(left, right, "&&", PosHelper.pos(leftleft, leftright)); :}
	|	expression:left LOGOR expression:right
			{: RESULT = new BinaryOperation(left, right, "||", PosHelper.pos(leftleft, leftright)); :}
	| LOGNOT:ln expression:right
			{: RESULT = new UnaryOperation(right, "!", PosHelper.pos(lnleft, lnright)); :}
	| INTEGER_LITERAL: v
			{: RESULT = new IntegerLiteral(v, PosHelper.pos(vleft, vright)); :}
	| DOUBLE_LITERAL: v
			{: RESULT = new DoubleLiteral(v, PosHelper.pos(vleft, vright)); :}
	| STRING_LITERAL: v
			{: RESULT = new StringLiteral(v, PosHelper.pos(vleft, vright)); :}
	| TRUE:v
			{: RESULT = new BooleanLiteral(true, PosHelper.pos(vleft, vright)); :}
	| FALSE:v
			{: RESULT = new BooleanLiteral(false, PosHelper.pos(vleft, vright)); :}
	| call:v
			{: RESULT = v; :}
	| lvalue: v
			{: RESULT = v; :}
	| LPAR expression:e RPAR
			{: RESULT = e; :}
;
